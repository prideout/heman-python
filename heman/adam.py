# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_adam', [dirname(__file__)])
        except ImportError:
            import _adam
            return _adam
        if fp is not None:
            try:
                _mod = imp.load_module('_adam', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _adam = swig_import_helper()
    del swig_import_helper
else:
    import _adam
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class HemanImageArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HemanImageArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HemanImageArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _adam.new_HemanImageArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _adam.delete_HemanImageArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _adam.HemanImageArray___getitem__(self, *args)
    def __setitem__(self, *args): return _adam.HemanImageArray___setitem__(self, *args)
    def cast(self): return _adam.HemanImageArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _adam.HemanImageArray_frompointer
    if _newclass:frompointer = staticmethod(_adam.HemanImageArray_frompointer)
HemanImageArray_swigregister = _adam.HemanImageArray_swigregister
HemanImageArray_swigregister(HemanImageArray)

def HemanImageArray_frompointer(*args):
  return _adam.HemanImageArray_frompointer(*args)
HemanImageArray_frompointer = _adam.HemanImageArray_frompointer


def heman_image_create(*args):
  return _adam.heman_image_create(*args)
heman_image_create = _adam.heman_image_create

def heman_image_info(*args):
  return _adam.heman_image_info(*args)
heman_image_info = _adam.heman_image_info

def heman_image_data(*args):
  return _adam.heman_image_data(*args)
heman_image_data = _adam.heman_image_data

def heman_image_array(*args):
  return _adam.heman_image_array(*args)
heman_image_array = _adam.heman_image_array

def heman_image_texel(*args):
  return _adam.heman_image_texel(*args)
heman_image_texel = _adam.heman_image_texel

def heman_image_sample(*args):
  return _adam.heman_image_sample(*args)
heman_image_sample = _adam.heman_image_sample

def heman_image_destroy(*args):
  return _adam.heman_image_destroy(*args)
heman_image_destroy = _adam.heman_image_destroy

def heman_color_set_gamma(*args):
  return _adam.heman_color_set_gamma(*args)
heman_color_set_gamma = _adam.heman_color_set_gamma

def heman_color_apply_gradient(*args):
  return _adam.heman_color_apply_gradient(*args)
heman_color_apply_gradient = _adam.heman_color_apply_gradient

def heman_generate_island_heightmap(*args):
  return _adam.heman_generate_island_heightmap(*args)
heman_generate_island_heightmap = _adam.heman_generate_island_heightmap

def heman_generate_planet_heightmap(*args):
  return _adam.heman_generate_planet_heightmap(*args)
heman_generate_planet_heightmap = _adam.heman_generate_planet_heightmap

def heman_generate_simplex_fbm(*args):
  return _adam.heman_generate_simplex_fbm(*args)
heman_generate_simplex_fbm = _adam.heman_generate_simplex_fbm

def heman_lighting_compute_normals(*args):
  return _adam.heman_lighting_compute_normals(*args)
heman_lighting_compute_normals = _adam.heman_lighting_compute_normals

def heman_lighting_compute_occlusion(*args):
  return _adam.heman_lighting_compute_occlusion(*args)
heman_lighting_compute_occlusion = _adam.heman_lighting_compute_occlusion

def heman_distance_create_sdf(*args):
  return _adam.heman_distance_create_sdf(*args)
heman_distance_create_sdf = _adam.heman_distance_create_sdf

def heman_export_ply(*args):
  return _adam.heman_export_ply(*args)
heman_export_ply = _adam.heman_export_ply

def heman_export_with_colors_ply(*args):
  return _adam.heman_export_with_colors_ply(*args)
heman_export_with_colors_ply = _adam.heman_export_with_colors_ply

def heman_ops_stitch_horizontal(*args):
  return _adam.heman_ops_stitch_horizontal(*args)
heman_ops_stitch_horizontal = _adam.heman_ops_stitch_horizontal

def heman_ops_stitch_vertical(*args):
  return _adam.heman_ops_stitch_vertical(*args)
heman_ops_stitch_vertical = _adam.heman_ops_stitch_vertical

def heman_ops_normalize_f32(*args):
  return _adam.heman_ops_normalize_f32(*args)
heman_ops_normalize_f32 = _adam.heman_ops_normalize_f32

def heman_ops_step(*args):
  return _adam.heman_ops_step(*args)
heman_ops_step = _adam.heman_ops_step

def heman_ops_sweep(*args):
  return _adam.heman_ops_sweep(*args)
heman_ops_sweep = _adam.heman_ops_sweep

def heman_color_create_gradient(*args):
  return _adam.heman_color_create_gradient(*args)
heman_color_create_gradient = _adam.heman_color_create_gradient

def heman_export_u8(*args):
  return _adam.heman_export_u8(*args)
heman_export_u8 = _adam.heman_export_u8

def heman_import_u8(*args):
  return _adam.heman_import_u8(*args)
heman_import_u8 = _adam.heman_import_u8

def heman_lighting_apply(*args):
  return _adam.heman_lighting_apply(*args)
heman_lighting_apply = _adam.heman_lighting_apply
# This file is compatible with both classic and new-style classes.


