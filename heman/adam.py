# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_adam', [dirname(__file__)])
        except ImportError:
            import _adam
            return _adam
        if fp is not None:
            try:
                _mod = imp.load_module('_adam', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _adam = swig_import_helper()
    del swig_import_helper
else:
    import _adam
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class HemanImageArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HemanImageArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HemanImageArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _adam.new_HemanImageArray(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adam.delete_HemanImageArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _adam.HemanImageArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _adam.HemanImageArray___setitem__(self, index, value)

    def cast(self):
        return _adam.HemanImageArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _adam.HemanImageArray_frompointer
    if _newclass:
        frompointer = staticmethod(_adam.HemanImageArray_frompointer)
HemanImageArray_swigregister = _adam.HemanImageArray_swigregister
HemanImageArray_swigregister(HemanImageArray)

def HemanImageArray_frompointer(t):
    return _adam.HemanImageArray_frompointer(t)
HemanImageArray_frompointer = _adam.HemanImageArray_frompointer


def heman_image_create(width, height, nbands):
    return _adam.heman_image_create(width, height, nbands)
heman_image_create = _adam.heman_image_create

def heman_image_info(arg1):
    return _adam.heman_image_info(arg1)
heman_image_info = _adam.heman_image_info

def heman_image_data(arg1):
    return _adam.heman_image_data(arg1)
heman_image_data = _adam.heman_image_data

def heman_image_array(img):
    return _adam.heman_image_array(img)
heman_image_array = _adam.heman_image_array

def heman_image_texel(arg1, x, y):
    return _adam.heman_image_texel(arg1, x, y)
heman_image_texel = _adam.heman_image_texel

def heman_image_sample(arg1, u, v, result):
    return _adam.heman_image_sample(arg1, u, v, result)
heman_image_sample = _adam.heman_image_sample

def heman_image_clear(arg1, value):
    return _adam.heman_image_clear(arg1, value)
heman_image_clear = _adam.heman_image_clear

def heman_image_destroy(arg1):
    return _adam.heman_image_destroy(arg1)
heman_image_destroy = _adam.heman_image_destroy

def heman_image_extract_alpha(arg1):
    return _adam.heman_image_extract_alpha(arg1)
heman_image_extract_alpha = _adam.heman_image_extract_alpha

def heman_image_extract_rgb(arg1):
    return _adam.heman_image_extract_rgb(arg1)
heman_image_extract_rgb = _adam.heman_image_extract_rgb

def heman_color_set_gamma(f):
    return _adam.heman_color_set_gamma(f)
heman_color_set_gamma = _adam.heman_color_set_gamma

def heman_color_apply_gradient(heightmap, minheight, maxheight, gradient):
    return _adam.heman_color_apply_gradient(heightmap, minheight, maxheight, gradient)
heman_color_apply_gradient = _adam.heman_color_apply_gradient

def heman_color_from_grayscale(gray):
    return _adam.heman_color_from_grayscale(gray)
heman_color_from_grayscale = _adam.heman_color_from_grayscale

def heman_color_to_grayscale(colorimg):
    return _adam.heman_color_to_grayscale(colorimg)
heman_color_to_grayscale = _adam.heman_color_to_grayscale

def heman_color_from_cpcf(cfield, texture):
    return _adam.heman_color_from_cpcf(cfield, texture)
heman_color_from_cpcf = _adam.heman_color_from_cpcf

def heman_generate_island_heightmap(width, height, seed):
    return _adam.heman_generate_island_heightmap(width, height, seed)
heman_generate_island_heightmap = _adam.heman_generate_island_heightmap

def heman_generate_rock_heightmap(width, height, seed):
    return _adam.heman_generate_rock_heightmap(width, height, seed)
heman_generate_rock_heightmap = _adam.heman_generate_rock_heightmap

def heman_generate_planet_heightmap(width, height, seed):
    return _adam.heman_generate_planet_heightmap(width, height, seed)
heman_generate_planet_heightmap = _adam.heman_generate_planet_heightmap

def heman_generate_archipelago_heightmap(width, height, points, noiseamt, seed):
    return _adam.heman_generate_archipelago_heightmap(width, height, points, noiseamt, seed)
heman_generate_archipelago_heightmap = _adam.heman_generate_archipelago_heightmap

def heman_generate_archipelago_political(width, height, points, colors, ocean, seed, elevation, political, elevation_mode):
    return _adam.heman_generate_archipelago_political(width, height, points, colors, ocean, seed, elevation, political, elevation_mode)
heman_generate_archipelago_political = _adam.heman_generate_archipelago_political

def heman_generate_simplex_fbm(width, height, frequency, amplitude, octaves, lacunarity, gain, seed):
    return _adam.heman_generate_simplex_fbm(width, height, frequency, amplitude, octaves, lacunarity, gain, seed)
heman_generate_simplex_fbm = _adam.heman_generate_simplex_fbm

def heman_lighting_compute_normals(heightmap):
    return _adam.heman_lighting_compute_normals(heightmap)
heman_lighting_compute_normals = _adam.heman_lighting_compute_normals

def heman_lighting_compute_occlusion(heightmap):
    return _adam.heman_lighting_compute_occlusion(heightmap)
heman_lighting_compute_occlusion = _adam.heman_lighting_compute_occlusion

def heman_lighting_set_occlusion_scale(s):
    return _adam.heman_lighting_set_occlusion_scale(s)
heman_lighting_set_occlusion_scale = _adam.heman_lighting_set_occlusion_scale

def heman_distance_create_sdf(monochrome):
    return _adam.heman_distance_create_sdf(monochrome)
heman_distance_create_sdf = _adam.heman_distance_create_sdf

def heman_distance_create_df(monochrome):
    return _adam.heman_distance_create_df(monochrome)
heman_distance_create_df = _adam.heman_distance_create_df

def heman_distance_create_cpcf(seed):
    return _adam.heman_distance_create_cpcf(seed)
heman_distance_create_cpcf = _adam.heman_distance_create_cpcf

def heman_distance_from_cpcf(cf):
    return _adam.heman_distance_from_cpcf(cf)
heman_distance_from_cpcf = _adam.heman_distance_from_cpcf

def heman_distance_identity_cpcf(width, height):
    return _adam.heman_distance_identity_cpcf(width, height)
heman_distance_identity_cpcf = _adam.heman_distance_identity_cpcf

def heman_export_ply(arg1, filename):
    return _adam.heman_export_ply(arg1, filename)
heman_export_ply = _adam.heman_export_ply

def heman_export_with_colors_ply(heightmap, colors, filename):
    return _adam.heman_export_with_colors_ply(heightmap, colors, filename)
heman_export_with_colors_ply = _adam.heman_export_with_colors_ply

def heman_ops_stitch_horizontal(images, count):
    return _adam.heman_ops_stitch_horizontal(images, count)
heman_ops_stitch_horizontal = _adam.heman_ops_stitch_horizontal

def heman_ops_stitch_vertical(images, count):
    return _adam.heman_ops_stitch_vertical(images, count)
heman_ops_stitch_vertical = _adam.heman_ops_stitch_vertical

def heman_ops_normalize_f32(source, minval, maxval):
    return _adam.heman_ops_normalize_f32(source, minval, maxval)
heman_ops_normalize_f32 = _adam.heman_ops_normalize_f32

def heman_ops_max(imga, imgb):
    return _adam.heman_ops_max(imga, imgb)
heman_ops_max = _adam.heman_ops_max

def heman_ops_step(image, threshold):
    return _adam.heman_ops_step(image, threshold)
heman_ops_step = _adam.heman_ops_step

def heman_ops_stairstep(image, nsteps, mask, mask_color, invert_mask, offset):
    return _adam.heman_ops_stairstep(image, nsteps, mask, mask_color, invert_mask, offset)
heman_ops_stairstep = _adam.heman_ops_stairstep

def heman_ops_percentiles(image, nsteps, mask, mask_color, invert_mask, offset):
    return _adam.heman_ops_percentiles(image, nsteps, mask, mask_color, invert_mask, offset)
heman_ops_percentiles = _adam.heman_ops_percentiles

def heman_ops_sweep(image):
    return _adam.heman_ops_sweep(image)
heman_ops_sweep = _adam.heman_ops_sweep

def heman_ops_laplacian(heightmap):
    return _adam.heman_ops_laplacian(heightmap)
heman_ops_laplacian = _adam.heman_ops_laplacian

def heman_ops_sobel(dst, edge_color):
    return _adam.heman_ops_sobel(dst, edge_color)
heman_ops_sobel = _adam.heman_ops_sobel

def heman_ops_accumulate(dst, src):
    return _adam.heman_ops_accumulate(dst, src)
heman_ops_accumulate = _adam.heman_ops_accumulate

def heman_ops_warp(src, seed, octaves):
    return _adam.heman_ops_warp(src, seed, octaves)
heman_ops_warp = _adam.heman_ops_warp

def heman_ops_warp_points(src, seed, octaves, pts):
    return _adam.heman_ops_warp_points(src, seed, octaves, pts)
heman_ops_warp_points = _adam.heman_ops_warp_points

def heman_ops_extract_mask(src, color, invert):
    return _adam.heman_ops_extract_mask(src, color, invert)
heman_ops_extract_mask = _adam.heman_ops_extract_mask

def heman_ops_replace_color(src, color, texture):
    return _adam.heman_ops_replace_color(src, color, texture)
heman_ops_replace_color = _adam.heman_ops_replace_color

def heman_ops_merge_political(elevation, political, ocean_color):
    return _adam.heman_ops_merge_political(elevation, political, ocean_color)
heman_ops_merge_political = _adam.heman_ops_merge_political

def heman_ops_emboss(elevation, mode):
    return _adam.heman_ops_emboss(elevation, mode)
heman_ops_emboss = _adam.heman_ops_emboss

def heman_points_destroy(arg1):
    return _adam.heman_points_destroy(arg1)
heman_points_destroy = _adam.heman_points_destroy

def heman_points_from_grid(width, height, cellsize, jitter):
    return _adam.heman_points_from_grid(width, height, cellsize, jitter)
heman_points_from_grid = _adam.heman_points_from_grid

def heman_points_from_poisson(width, height, mindist):
    return _adam.heman_points_from_poisson(width, height, mindist)
heman_points_from_poisson = _adam.heman_points_from_poisson

def heman_points_from_density(density, mindist, maxdist):
    return _adam.heman_points_from_density(density, mindist, maxdist)
heman_points_from_density = _adam.heman_points_from_density

def heman_draw_points(target, pts, val):
    return _adam.heman_draw_points(target, pts, val)
heman_draw_points = _adam.heman_draw_points

def heman_draw_colored_circles(target, pts, radius, colors):
    return _adam.heman_draw_colored_circles(target, pts, radius, colors)
heman_draw_colored_circles = _adam.heman_draw_colored_circles

def heman_draw_splats(target, pts, radius, blend_mode):
    return _adam.heman_draw_splats(target, pts, radius, blend_mode)
heman_draw_splats = _adam.heman_draw_splats

def heman_draw_contour_from_points(target, coords, color, mind, maxd, filterd):
    return _adam.heman_draw_contour_from_points(target, coords, color, mind, maxd, filterd)
heman_draw_contour_from_points = _adam.heman_draw_contour_from_points

def heman_generate_archipelago_political_2(width, height, ocean, seed, political, invert):
    return _adam.heman_generate_archipelago_political_2(width, height, ocean, seed, political, invert)
heman_generate_archipelago_political_2 = _adam.heman_generate_archipelago_political_2

def heman_points_create(*args):
    return _adam.heman_points_create(*args)
heman_points_create = _adam.heman_points_create

def heman_color_create_gradient(*args):
    return _adam.heman_color_create_gradient(*args)
heman_color_create_gradient = _adam.heman_color_create_gradient

def heman_draw_colored_points(*args):
    return _adam.heman_draw_colored_points(*args)
heman_draw_colored_points = _adam.heman_draw_colored_points

def heman_export_u8(*args):
    return _adam.heman_export_u8(*args)
heman_export_u8 = _adam.heman_export_u8

def heman_import_u8(*args):
    return _adam.heman_import_u8(*args)
heman_import_u8 = _adam.heman_import_u8

def heman_lighting_apply(*args):
    return _adam.heman_lighting_apply(*args)
heman_lighting_apply = _adam.heman_lighting_apply

def heman_generate_archipelago_political_1(*args):
    return _adam.heman_generate_archipelago_political_1(*args)
heman_generate_archipelago_political_1 = _adam.heman_generate_archipelago_political_1

def heman_generate_archipelago_political_3(*args):
    return _adam.heman_generate_archipelago_political_3(*args)
heman_generate_archipelago_political_3 = _adam.heman_generate_archipelago_political_3
# This file is compatible with both classic and new-style classes.


